.TH "flt_task_group" "3" "2014-01-01" "Fleet" "Fleet\ documentation"
.SH NAME
.PP
flt_task_group \[en] Task groups
.SH SYNOPSIS
.PP
\f[B]#include <fleet.h>\f[]
.PP
\f[B]struct flt_task_group\f[];
.PP
struct flt_task_group *
.PD 0
.P
.PD
\f[B]flt_current_group\f[](struct flt *\f[I]flt\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_run_after_group\f[](struct flt *\f[I]flt\f[], struct
flt_task_group *\f[I]group\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct flt_task *\f[I]task\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_run_after_current_group\f[](struct flt *\f[I]flt\f[], struct
flt_task *\f[I]task\f[]);
.SH DESCRIPTION
.PP
Each task in a fleet belongs to a \f[I]group\f[], which is represented
by an \f[B]flt_task_group\f[] instance.
.PP
\f[B]flt_current_group\f[]() returns the group that the currently
executing task belongs to.
.PP
\f[B]flt_run_after_group\f[]() and
\f[B]flt_run_after_current_group\f[]() let you register an
\[lq]after\[rq] task with a group.
This lets you detect when a group of tasks has finished executing; if
the group has any after tasks, the group will automatically schedule
those tasks to be executed when all of the tasks that belong to group
have finished executing.
Note that this works even if the group isn't completely defined when you
register the after task \[em] you can add more tasks to the group while
it's executing, and these new tasks must also finish before the group is
considered finished.
