.TH "flt_task_group" "3" "2014-01-01" "Fleet" "Fleet\ documentation"
.SH NAME
.PP
flt_task_group \[en] Task groups
.SH SYNOPSIS
.PP
\f[B]#include <fleet.h>\f[]
.PP
\f[B]struct flt_task_group\f[];
.PP
struct flt_task_group *
.PD 0
.P
.PD
\f[B]flt_task_group_new\f[](struct flt *\f[I]flt\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_task_group_add\f[](struct flt *\f[I]flt\f[], struct
flt_task_group *\f[I]group\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct flt_task *\f[I]task\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_task_group_start\f[](struct flt *\f[I]flt\f[], struct
flt_task_group *\f[I]group\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_task_group_run_after\f[](struct flt *\f[I]flt\f[], struct
flt_task_group *\f[I]before\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct flt_task_group
*\f[I]after\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_task_group_run_after_current\f[](struct flt *\f[I]flt\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ struct
flt_task_group *\f[I]after\f[]);
.SH DESCRIPTION
.PP
\f[I]Task groups\f[] allow you to create a collection of tasks that
should all be scheduled for execution at the same time, in response to
some event that happens.
Each task in a fleet belongs to exactly one task group.
.PP
You do not have to use task groups.
For instance, you can schedule tasks individually using the
\f[B]flt_run\f[](3) family of functions.
For many applications, this is sufficient, and you don't have to care
about which task group any particular task belongs to.
.PP
One use case where you do need task groups is the \f[I]fork\-join\f[]
model.
In this case, you have a collection of tasks, and schedule them all for
execution.
You then need to be notified when \f[I]all\f[] of those tasks complete.
Task groups provide one way of implementing this pattern without having
to worry about thread synchronization yourself.
.PP
\f[B]flt_task_group_new\f[]() creates a new task group.
The task group is initially empty.
.PP
\f[B]flt_task_group_add\f[]() adds a task (created via
\f[B]flt_task_new\f[](3)) to a group.
The group must be stopped; it is your responsibility to not call this
function if you've already started the task group.
.PP
\f[B]flt_task_group_start\f[]() starts a task group.
All of the tasks that are in the group become eligible for execution.
You must ensure that you call this function at most once for any
particular group.
.PP
\f[B]flt_task_group_run_after\f[]() and
\f[B]flt_task_group_run_after_current\f[]() tell the fleet to
automatically start an \[lq]after\[rq] task group once all of the tasks
in a \[lq]before\[rq] task group have finished.
With \f[B]flt_task_group_run_after\f[](), you provide both task groups
explicitly.
With \f[B]flt_task_group_run_after_current\f[](), the \[lq]before\[rq]
group is the task group that the currently executing task belongs to.
Note that these functions work as expected even if the \[lq]before\[rq]
group isn't completely defined when you register the \[lq]after\[rq]
group \[em] you can add more tasks to the group while it's executing
(via \f[B]flt_run\f[](3)), and these new tasks must also finish before
the \[lq]before\[rq] group is considered finished.
.SH THREAD SAFETY
.PP
It is safe to call \f[B]flt_task_group_add\f[]() from multiple execution
contexts simultaneously.
This means that you can have multiple tasks that are all adding to a new
(stopped) task group without having to worry about synchronizing those
tasks.
.PP
It is \f[I]not\f[] safe to call \f[B]flt_task_group_start\f[]() multiple
times.
That means that if you need to several conditions to be true before you
start a task, you must either use some thread\-safe mechanism to keep
track of those conditions, or use \f[B]flt_task_group_run_after\f[]() to
let the fleet scheduler worry about that for you.
.SH TASK GROUP LIFE CYCLE
.PP
Each task group can be in one of two states:
.TP
.B stopped
The task group is not ready to be executed.
You can freely add new tasks to the group, from multiple execution
contexts at once, since \f[B]flt_task_group_add\f[]() is thread\-safe.
Adding a task to the group moves that task from the \[lq]detached\[rq]
state to the \[lq]pending\[rq] state.
.RS
.RE
.TP
.B started
Once you call \f[B]flt_task_group_start\f[](), any tasks that are in the
group move from the \[lq]pending\[rq] state to the \[lq]ready\[rq]
state, and become eligible for execution by some fleet context.
You do not have any control over when the tasks in the group will be
executed, or in which order they'll be executed.
.RS
.PP
You can no longer add new tasks to the group using
\f[B]flt_task_group_add\f[]().
However, when one of the existing tasks in the group is executing, you
can use the \f[B]flt_run\f[](3) family of functions to add a new task to
the group, and immediately schedule it for execution.
That new task passes directly from the \[lq]detached\[rq] state to the
\[lq]ready\[rq] state.
.RE
