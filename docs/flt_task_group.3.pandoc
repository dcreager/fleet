% flt_task_group(3)

# NAME

flt_task_group -- Task groups

# SYNOPSIS

| **#include &lt;fleet.h&gt;**
|
| **struct flt_task_group**;
|
| struct flt_task_group \*
| **flt_task_group_new**(struct flt \**flt*);
|
| void
| **flt_task_group_add**(struct flt \**flt*, struct flt_task_group \**group*,
|                    struct flt_task \**task*);
|
| void
| **flt_task_group_start**(struct flt \**flt*, struct flt_task_group \**group*);
|
| void
| **flt_task_group_run_after**(struct flt \**flt*, struct flt_task_group \**before*,
|                          struct flt_task_group \**after*);
|
| void
| **flt_task_group_run_after_current**(struct flt \**flt*,
|                                  struct flt_task_group \**after*);


# DESCRIPTION

*Task groups* allow you to create a collection of tasks that should all be
scheduled for execution at the same time, in response to some event that
happens.  Each task in a fleet belongs to exactly one task group.

You do not have to use task groups.  For instance, you can schedule tasks
individually using the **flt_run**(3) family of functions.  For many
applications, this is sufficient, and you don't have to care about which task
group any particular task belongs to.

One use case where you do need task groups is the *fork-join* model.  In this
case, you have a collection of tasks, and schedule them all for execution.  You
then need to be notified when *all* of those tasks complete.  Task groups
provide one way of implementing this pattern without having to worry about
thread synchronization yourself.

**flt_task_group_new**() creates a new task group.  The task group is initially
empty.

**flt_task_group_add**() adds a task (created via **flt_task_new**(3)) to a
group.  The group must be stopped; it is your responsibility to not call this
function if you've already started the task group.

**flt_task_group_start**() starts a task group.  All of the tasks that are in
the group become eligible for execution.  You must ensure that you call this
function at most once for any particular group.

**flt_task_group_run_after**() and **flt_task_group_run_after_current**() tell
the fleet to automatically start an "after" task group once all of the tasks in
a "before" task group have finished.  With **flt_task_group_run_after**(), you
provide both task groups explicitly.  With
**flt_task_group_run_after_current**(), the "before" group is the task group
that the currently executing task belongs to.  Note that these functions work as
expected even if the "before" group isn't completely defined when you register
the "after" group â€” you can add more tasks to the group while it's executing
(via **flt_run**(3)), and these new tasks must also finish before the "before"
group is considered finished.


# THREAD SAFETY

It is safe to call **flt_task_group_add**() from multiple execution contexts
simultaneously.  This means that you can have multiple tasks that are all adding
to a new (stopped) task group without having to worry about synchronizing those
tasks.

It is *not* safe to call **flt_task_group_start**() multiple times.  That means
that if you need to several conditions to be true before you start a task, you
must either use some thread-safe mechanism to keep track of those conditions, or
use **flt_task_group_run_after**() to let the fleet scheduler worry about that
for you.


# TASK GROUP LIFE CYCLE

Each task group can be in one of two states:

stopped

  : The task group is not ready to be executed.  You can freely add new tasks to
    the group, from multiple execution contexts at once, since
    **flt_task_group_add**() is thread-safe.  Adding a task to the group moves
    that task from the "detached" state to the "pending" state.

started

  : Once you call **flt_task_group_start**(), any tasks that are in the group
    move from the "pending" state to the "ready" state, and become eligible for
    execution by some fleet context.  You do not have any control over when the
    tasks in the group will be executed, or in which order they'll be executed.

    You can no longer add new tasks to the group using **flt_task_group_add**().
    However, when one of the existing tasks in the group is executing, you can
    use the **flt_run**(3) family of functions to add a new task to the group,
    and immediately schedule it for execution.  That new task passes directly
    from the "detached" state to the "ready" state.
