.TH "flt_task" "3" "2014-01-01" "Fleet" "Fleet\ documentation"
.SH NAME
.PP
flt_task \[en] Tasks
.SH SYNOPSIS
.PP
\f[B]#include <fleet.h>\f[]
.PP
\f[B]struct flt_task\f[];
.PP
typedef void
.PD 0
.P
.PD
\f[B]flt_task\f[](struct flt *\f[I]flt\f[], void *\f[I]ud\f[], size_t
\f[I]i\f[]);
.PP
struct flt_task *
.PD 0
.P
.PD
\f[B]flt_task_new\f[](struct flt *\f[I]flt\f[], flt_task *\f[I]func\f[],
void *\f[I]ud\f[], size_t \f[I]i\f[]);
.PP
struct flt_task *
.PD 0
.P
.PD
\f[B]flt_bulk_task_new\f[](struct flt *\f[I]flt\f[], flt_task
*\f[I]func\f[], void *\f[I]ud\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t \f[I]min\f[], size_t
\f[I]max\f[]);
.SH DESCRIPTION
.PP
A \f[I]task\f[] is the smallest unit of computation in a fleet.
When you schedule a task, the fleet will decide to run it at some point,
in some execution context.
(You can have a small amount of control over when and in which context,
depending on which function you use to schedule the task; see
\f[B]flt_run\f[](3) for details.)
.PP
Each task is represented by an \f[B]flt_task\f[] instance, and consists
of a \[lq]task function\[rq], which is the block of code that will
execute when the fleet decides that it's time to run the task.
.PP
The task function's \f[I]ud\f[] and \f[I]i\f[] parameters are provided
when you create a task instance.
\f[B]flt_task_new\f[]() creates a new task that will execute the task
function once, with the given \f[I]ud\f[] and \f[I]i\f[] parameters.
\f[B]flt_bulk_task_new\f[]() lets you create a single \f[B]flt_task\f[]
instance that will call the task function multiple times, all with the
same value for their \f[I]ud\f[] parameter, but with different
\f[I]i\f[] values, ranging from \f[I]min\f[] <= \f[I]i\f[] <
\f[I]max\f[].
(Note that even though all of these task invocations are represented by
a single bulk \f[B]flt_task\f[] instance, the fleet scheduler sees them
as discrete schedulable entities.)
.PP
In both cases, the new task is not yet scheduled for execution; you must
use one of the \f[B]flt_run\f[](3) family of functions to schedule the
new task.
.PP
In addition to the \f[I]ud\f[] and \f[I]i\f[] input parameters, each
task function is given a \f[B]flt\f[](3) instance, which can be used to
create and schedule additional tasks.
.SH TASK LIFE CYCLE
.PP
Each task can be in one of four states:
.TP
.B detached
The task does not yet belong to any task group.
The task cannot be scheduled until you add it to some task group, and
then start that group.
.RS
.RE
.TP
.B pending
The task belongs to a task group that has not been started yet.
The task cannot be scheduled for execution until you start its task
group.
.RS
.RE
.TP
.B ready
The task belongs to a task group that has been started.
The task is now scheduled for execution; at some point, one of the
fleet's execution contexts will execute the task.
.RS
.RE
.TP
.B running
The task is currently being executed by one of the fleet's execution
contexts, in one of the fleet's threads.
.RS
.RE
.PP
Each \f[B]flt_task\f[] instance starts off \[lq]detached\[rq].
There are two ways to update a detached task so that it is ready for
execution.
.PP
The most common way is to run the new task in the same task group as the
currently executing task, using the \f[B]flt_run\f[](3) family of
functions.
This immediately moves the task from the \[lq]detached\[rq] state to the
\[lq]ready\[rq] state.
(Note that this is the only way to add a new task to a task group that's
already been started.)
.PP
The other way is to use \f[B]flt_task_group_add\f[](3) to add the new
task to a task group that hasn't been started yet.
This moves the task from the \[lq]detached\[rq] state to the
\[lq]pending\[rq] state.
Once you have added all of the necessary tasks to this group, you can
use \f[B]flt_task_group_start\f[](3) to start the task group.
This moves all of the tasks in the group from the \[lq]pending\[rq]
state to the \[lq]ready\[rq] state.
.SH RETURN VALUES
.PP
\f[B]flt_task_new\f[]() and \f[B]flt_bulk_task_new\f[]() will always
return a valid new task object.
