% fleet(7)

# NAME

fleet -- Fast and lightweight user-level concurrency and parallelism

# DESCRIPTION

The fleet library provides a simple user-level concurrency and parallelism API.
The name "fleet" is meant to evoke both speed, and that your application is a
collection of small tasks cooperate to accomplish some goal.

At the lowest level, fleet provides an API for scheduling and executing *tasks*,
which are small units of computation; see **flt_fleet**(3) and **flt_task**(3)
for details.  This low-level API is purposefully simple.  It does not worry
about any memory management, and the only communication primitive is a simple
"executes after" relationship between tasks.  While this simplicity places
restrictions on the kinds of code you can (easily) write, it also gives our task
scheduler the most flexibility in exploiting multiple cores to execute your
fleet of tasks in parallel.

Fleet also provides tools for building higher-level abstractions on top of the
low-level task scheduling API.  The primary example is **flt_local**(3), which
is the task equivalent of thread-local storage.

Lastly, fleet uses these tools to provide several built-in higher-level
abstractions.  In particular the **flt_channel**(3) API provides CSP-like
communications channels between tasks, and the **flt_pool**(3) API provides
task-aware memory management.
