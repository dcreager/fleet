% flt_task(3)

# NAME

flt_task -- Tasks

# SYNOPSIS

| **#include &lt;fleet.h&gt;**
|
| **struct flt_task**;
|
| typedef void
| **flt_task**(struct flt \**flt*, void \**ud*, size_t *i*);
|
| struct flt_task \*
| **flt_task_new**(struct flt \**flt*, flt_task \**func*, void \**ud*, size_t *i*);


# DESCRIPTION

A *task* is the smallest unit of computation in a fleet.  When you schedule a
task, the fleet will decide to run it at some point, in some execution context.
(You can have a small amount of control over when and in which context,
depending on which function you use to schedule the task; see **flt_run**(3) for
details.)

Each task is represented by an **flt_task** instance, and consists of a "task
function", which is the block of code that will execute when the fleet decides
that it's time to run the task.

The task function's *ud* and *i* parameters are provided when you create a task
instance.  **flt_task_new**() creates a new task that will execute the task
function once, with the given *ud* and *i* parameters.  The new task is not yet
scheduled for execution; you must use one of the **flt_run**(3) family of
functions to schedule the new task.

In addition to the *ud* and *i* input parameters, each task function is given a
**flt**(3) instance, which can be used to create and schedule additional tasks.


# TASK LIFE CYCLE

Each task can be in one of four states:

detached

  : The task does not yet belong to any task group.  The task cannot be
    scheduled until you add it to some task group, and then start that group.

pending

  : The task belongs to a task group that has not been started yet.  The task
    cannot be scheduled for execution until you start its task group.

ready

  : The task belongs to a task group that has been started.  The task is now
    scheduled for execution; at some point, one of the fleet's execution
    contexts will execute the task.

running

  : The task is currently being executed by one of the fleet's execution
    contexts, in one of the fleet's threads.

Each **flt_task** instance starts off "detached".  There are two ways to update
a detached task so that it is ready for execution.

The most common way is to run the new task in the same task group as the
currently executing task, using the **flt_run**(3) family of functions.  This
immediately moves the task from the "detached" state to the "ready" state.
(Note that this is the only way to add a new task to a task group that's already
been started.)

The other way is to use **flt_task_group_add**(3) to add the new task to a task
group that hasn't been started yet.  This moves the task from the "detached"
state to the "pending" state.  Once you have added all of the necessary tasks to
this group, you can use **flt_task_group_start**(3) to start the task group.
This moves all of the tasks in the group from the "pending" state to the "ready"
state.


# RETURN VALUES

**flt_task_new**() will always return a valid new task object.
