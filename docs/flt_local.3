.TH "flt_local" "3" "2014-01-01" "Fleet" "Fleet\ documentation"
.SH NAME
.PP
flt_local \[en] Context\-local storage
.SH SYNOPSIS
.PP
\f[B]#include <fleet.h>\f[]
.PP
\f[B]struct flt_local\f[];
.PP
typedef void
.PD 0
.P
.PD
(\f[B]flt_local_init_f\f[])(struct flt *\f[I]flt\f[], void *\f[I]ud\f[],
void *\f[I]instance\f[]);
.PP
typedef void
.PD 0
.P
.PD
(\f[B]flt_local_done_f\f[])(struct flt *\f[I]flt\f[], void *\f[I]ud\f[],
void *\f[I]instance\f[]);
.PP
struct flt_local *
.PD 0
.P
.PD
\f[B]flt_local_new\f[](struct flt *\f[I]flt\f[], TYPE \f[I]type\f[],
void *\f[I]ud\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ flt_local_init_f *\f[I]init_instance\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ flt_local_done_f *\f[I]done_instance\f[]);
.PP
void
.PD 0
.P
.PD
\f[B]flt_local_free\f[](struct flt *\f[I]flt\f[], struct flt_local
*\f[I]local\f[]);
.PP
void *
.PD 0
.P
.PD
\f[B]flt_local_get\f[](struct flt *\f[I]flt\f[], struct flt_local
*\f[I]local\f[], TYPE \f[I]type\f[]);
.PP
typedef void
.PD 0
.P
.PD
\f[B]flt_local_visit_f\f[](struct flt *\f[I]flt\f[], \f[I]type\f[]
*\f[I]instance\f[], \&...);
.PP
void
.PD 0
.P
.PD
\f[B]flt_local_visit\f[](struct flt *\f[I]flt\f[], struct flt_local
*\f[I]local\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ TYPE \f[I]type\f[], flt_local_visit_f
*\f[I]visitor\f[], \f[I]\&...\f[]);
.PP
\f[B]flt_local_foreach\f[](struct flt *\f[I]flt\f[], struct flt_local
*\f[I]local\f[],
.PD 0
.P
.PD
\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ size_t &\f[I]i\f[], TYPE
\f[I]type\f[], \f[I]type\f[] &*\f[I]instance\f[])
.PD 0
.P
.PD
\ \ \ \ STATEMENT
.SH DESCRIPTION
.PP
The \f[B]flt_local\f[] API is analogous to thread\-local storage (TLS)
in a traditional threaded application.
It allows you to have a distinct instance of a particular data type for
each execution context in a fleet.
You provide callback functions that can allocate and deallocate an
individual instance; the \f[B]flt_local\f[] manager is then responsible
for the actual life cycle of the instances, and for providing the
instance associated with a particular execution context.
.PP
\f[B]flt_local_new\f[]() creates a new \f[B]flt_local\f[] manager,
creating an instance of \f[I]type\f[] for each execution context in the
fleet.
This new manager will use \f[I]init_instance\f[] and
\f[I]done_instance\f[] to initialize and finalize the data instances
that it manages.
Your \f[I]init_instance\f[] callback will be called exactly once for
each execution context in the fleet.
Note that your initialization function is given a pointer to the
\f[B]flt\f[](3) instance that it belongs to, in case you need to store
this somewhere in your data structure.
.PP
\f[B]flt_local_free\f[]() frees an \f[B]flt_local\f[] manager, and any
instances that it has created.
If the manager is shared among multiple tasks, you must ensure that only
one of them frees it, and only does so when all of the other tasks are
done using it.
.PP
\f[B]flt_local_get\f[]() returns the data instance for a particular
execution context.
The result will be a pointer to an instance of \f[I]type\f[], which must
match the type passed in to the \f[B]flt_local_new\f[]() constructor.
.PP
\f[B]flt_local_visit\f[]() calls a \f[I]visitor\f[] function once for
each of the context\-specific instances in the \f[B]flt_local\f[]
manager.
\f[I]type\f[] must match the type passed in to the
\f[B]flt_local_new\f[]() constructor.
Any additional \f[I]\&...\f[] parameters will be passed as\-is to the
visitor function.
(You must currently pass in at least one additional \f[I]\&...\f[]
because of limitations of the C preprocessor.) For instance, if your
\f[B]flt_local\f[] manager contains instances of
\f[C]struct\ my_type\f[], you could visit those instances using:
.IP
.nf
\f[C]
static\ void
visit(struct\ flt\ *flt,\ struct\ my_type\ *instance,\ size_t\ *count)
{
\ \ \ \ (*count)++;
}

size_t\ \ count\ =\ 0;
flt_local_visit(flt,\ local,\ struct\ my_type,\ visit,\ &count);
\f[]
.fi
.PP
\f[B]flt_local_foreach\f[]() is a custom control structure that will
execute a statement once for each context\-specific instance.
\f[I]i\f[] must be the name of a \f[C]size_t\f[] variable that you've
allocated.
\f[I]type\f[] must match the type passed in to the
\f[B]flt_local_new\f[]() constructor.
\f[I]instance\f[] must be the name of a pointer to this type, which
you've allocated.
For instance:
.IP
.nf
\f[C]
size_t\ \ i;
struct\ my_type\ \ *ctx;
flt_local_foreach(flt,\ local,\ i,\ struct\ my_type,\ ctx)\ {
\ \ \ \ /*\ Within\ the\ block,\ `ctx`\ is\ one\ of\ the\ context\-specific
\ \ \ \ \ *\ instances,\ and\ `i`\ is\ its\ index.\ */
}
\f[]
.fi
.PP
Both \f[B]flt_local_visit\f[]() and \f[B]flt_local_foreach\f[]() will
cause the current task to access data that is technically owned by some
other execution context; it is your responsibility to make sure this
happens in a thread\-safe manner.
You will usually use this function in a cleanup task to \[lq]merge\[rq]
partial results that were calculated in each execution context, using
one of the \f[B]flt_task_group_run_after\f[](3) family of functions.
.SH RETURN VALUES
.PP
\f[B]flt_local_new\f[]() will always return a valid new
\f[B]flt_local\f[] manager.
